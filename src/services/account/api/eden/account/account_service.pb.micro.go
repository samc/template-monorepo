// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: eden/account/account_service.proto

package account

import (
	_ "eden.account/api/eden/api"
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AccountService service

func NewAccountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "AccountService.Create",
			Path:    []string{"/v1/accounts"},
			Method:  []string{"POST"},
			Body:    "account",
			Handler: "rpc",
		},
		{
			Name:    "AccountService.Get",
			Path:    []string{"/v1/accounts/{account.id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "AccountService.Update",
			Path:    []string{"/v1/accounts"},
			Method:  []string{"PUT"},
			Body:    "account",
			Handler: "rpc",
		},
		{
			Name:    "AccountService.Delete",
			Path:    []string{"/v1/accounts/{account.id}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for AccountService service

type AccountService interface {
	// Create takes a request `CreateAccountRequest` and returns a response
	// `Account`
	Create(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*Account, error)
	// Get takes a request `GetAccountRequest` and returns a response
	// `Account`
	Get(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*Account, error)
	// Get takes a request `UpdateAccountRequest` and returns a response
	// `Account`
	Update(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*Account, error)
	// Delete takes a request `DeleteAccountRequest` and returns a response
	// `google.protobuf.Empty`
	Delete(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*Account, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Create(ctx context.Context, in *CreateAccountRequest, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Create", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Get(ctx context.Context, in *GetAccountRequest, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Get", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Update(ctx context.Context, in *UpdateAccountRequest, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Update", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Delete(ctx context.Context, in *DeleteAccountRequest, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.Delete", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	// Create takes a request `CreateAccountRequest` and returns a response
	// `Account`
	Create(context.Context, *CreateAccountRequest, *Account) error
	// Get takes a request `GetAccountRequest` and returns a response
	// `Account`
	Get(context.Context, *GetAccountRequest, *Account) error
	// Get takes a request `UpdateAccountRequest` and returns a response
	// `Account`
	Update(context.Context, *UpdateAccountRequest, *Account) error
	// Delete takes a request `DeleteAccountRequest` and returns a response
	// `google.protobuf.Empty`
	Delete(context.Context, *DeleteAccountRequest, *Account) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		Create(ctx context.Context, in *CreateAccountRequest, out *Account) error
		Get(ctx context.Context, in *GetAccountRequest, out *Account) error
		Update(ctx context.Context, in *UpdateAccountRequest, out *Account) error
		Delete(ctx context.Context, in *DeleteAccountRequest, out *Account) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AccountService.Create",
		Path:    []string{"/v1/accounts"},
		Method:  []string{"POST"},
		Body:    "account",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AccountService.Get",
		Path:    []string{"/v1/accounts/{account.id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AccountService.Update",
		Path:    []string{"/v1/accounts"},
		Method:  []string{"PUT"},
		Body:    "account",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AccountService.Delete",
		Path:    []string{"/v1/accounts/{account.id}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) Create(ctx context.Context, in *CreateAccountRequest, out *Account) error {
	return h.AccountServiceHandler.Create(ctx, in, out)
}

func (h *accountServiceHandler) Get(ctx context.Context, in *GetAccountRequest, out *Account) error {
	return h.AccountServiceHandler.Get(ctx, in, out)
}

func (h *accountServiceHandler) Update(ctx context.Context, in *UpdateAccountRequest, out *Account) error {
	return h.AccountServiceHandler.Update(ctx, in, out)
}

func (h *accountServiceHandler) Delete(ctx context.Context, in *DeleteAccountRequest, out *Account) error {
	return h.AccountServiceHandler.Delete(ctx, in, out)
}
