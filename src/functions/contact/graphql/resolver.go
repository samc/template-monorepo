// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"

	"taygo.contact/graphql/generated"
	"taygo.contact/graphql/model"
)

type Resolver struct {
	MutationResolver struct {
		CreateContact func(ctx context.Context, contact model.ContactCreateInput) (*model.Contact, error)
		UpdateContact func(ctx context.Context, contact model.ContactUpdateInput) (*model.Contact, error)
		DeleteContact func(ctx context.Context, id string) (*model.Contact, error)
	}
	QueryResolver struct {
		Contact  func(ctx context.Context, id string) (*model.Contact, error)
		Contacts func(ctx context.Context) ([]*model.Contact, error)
	}
}

func (r *Resolver) Mutation() generated.MutationResolver {
	return &resolverMutation{r}
}
func (r *Resolver) Query() generated.QueryResolver {
	return &resolverQuery{r}
}

type resolverMutation struct{ *Resolver }

func (r *resolverMutation) CreateContact(ctx context.Context, contact model.ContactCreateInput) (*model.Contact, error) {
	return r.MutationResolver.CreateContact(ctx, contact)
}
func (r *resolverMutation) UpdateContact(ctx context.Context, contact model.ContactUpdateInput) (*model.Contact, error) {
	return r.MutationResolver.UpdateContact(ctx, contact)
}
func (r *resolverMutation) DeleteContact(ctx context.Context, id string) (*model.Contact, error) {
	return r.MutationResolver.DeleteContact(ctx, id)
}

type resolverQuery struct{ *Resolver }

func (r *resolverQuery) Contact(ctx context.Context, id string) (*model.Contact, error) {
	return r.QueryResolver.Contact(ctx, id)
}
func (r *resolverQuery) Contacts(ctx context.Context) ([]*model.Contact, error) {
	return r.QueryResolver.Contacts(ctx)
}
