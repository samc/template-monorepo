# DO NOT EDIT! Generated by protoc-gen-graphql.

"""
FieldRules encapsulates the rules for each type of field. Depending on the
field, the correct set should be used to ensure proper validations.
"""
type Validate_FieldRules {
  message: Validate_MessageRules
  type: Validate_FieldRules_TypeOneof
}

"""
`Validate_FieldRules_TypeOneof` represents the `type` oneof in `validate.FieldRules`.
"""
union Validate_FieldRules_TypeOneof = Validate_FieldRules_TypeOneof_Float | Validate_FieldRules_TypeOneof_Double | Validate_FieldRules_TypeOneof_Int32 | Validate_FieldRules_TypeOneof_Int64 | Validate_FieldRules_TypeOneof_Uint32 | Validate_FieldRules_TypeOneof_Uint64 | Validate_FieldRules_TypeOneof_Sint32 | Validate_FieldRules_TypeOneof_Sint64 | Validate_FieldRules_TypeOneof_Fixed32 | Validate_FieldRules_TypeOneof_Fixed64 | Validate_FieldRules_TypeOneof_Sfixed32 | Validate_FieldRules_TypeOneof_Sfixed64 | Validate_FieldRules_TypeOneof_Bool | Validate_FieldRules_TypeOneof_String | Validate_FieldRules_TypeOneof_Bytes | Validate_FieldRules_TypeOneof_Enum | Validate_FieldRules_TypeOneof_Repeated | Validate_FieldRules_TypeOneof_Map | Validate_FieldRules_TypeOneof_Any | Validate_FieldRules_TypeOneof_Duration | Validate_FieldRules_TypeOneof_Timestamp

"""
`Validate_FieldRules_TypeOneof_Float` represents the `float` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Float {
  _typename: String
  """
  Scalar Field Types
  """
  float: Validate_FloatRules
}

"""
`Validate_FieldRules_TypeOneof_Double` represents the `double` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Double {
  _typename: String
  double: Validate_DoubleRules
}

"""
`Validate_FieldRules_TypeOneof_Int32` represents the `int32` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Int32 {
  _typename: String
  int32: Validate_Int32Rules
}

"""
`Validate_FieldRules_TypeOneof_Int64` represents the `int64` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Int64 {
  _typename: String
  int64: Validate_Int64Rules
}

"""
`Validate_FieldRules_TypeOneof_Uint32` represents the `uint32` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Uint32 {
  _typename: String
  uint32: Validate_UInt32Rules
}

"""
`Validate_FieldRules_TypeOneof_Uint64` represents the `uint64` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Uint64 {
  _typename: String
  uint64: Validate_UInt64Rules
}

"""
`Validate_FieldRules_TypeOneof_Sint32` represents the `sint32` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Sint32 {
  _typename: String
  sint32: Validate_SInt32Rules
}

"""
`Validate_FieldRules_TypeOneof_Sint64` represents the `sint64` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Sint64 {
  _typename: String
  sint64: Validate_SInt64Rules
}

"""
`Validate_FieldRules_TypeOneof_Fixed32` represents the `fixed32` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Fixed32 {
  _typename: String
  fixed32: Validate_Fixed32Rules
}

"""
`Validate_FieldRules_TypeOneof_Fixed64` represents the `fixed64` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Fixed64 {
  _typename: String
  fixed64: Validate_Fixed64Rules
}

"""
`Validate_FieldRules_TypeOneof_Sfixed32` represents the `sfixed32` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Sfixed32 {
  _typename: String
  sfixed32: Validate_SFixed32Rules
}

"""
`Validate_FieldRules_TypeOneof_Sfixed64` represents the `sfixed64` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Sfixed64 {
  _typename: String
  sfixed64: Validate_SFixed64Rules
}

"""
`Validate_FieldRules_TypeOneof_Bool` represents the `bool` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Bool {
  _typename: String
  bool: Validate_BoolRules
}

"""
`Validate_FieldRules_TypeOneof_String` represents the `string` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_String {
  _typename: String
  string: Validate_StringRules
}

"""
`Validate_FieldRules_TypeOneof_Bytes` represents the `bytes` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Bytes {
  _typename: String
  bytes: Validate_BytesRules
}

"""
`Validate_FieldRules_TypeOneof_Enum` represents the `enum` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Enum {
  _typename: String
  """
  Complex Field Types
  """
  enum: Validate_EnumRules
}

"""
`Validate_FieldRules_TypeOneof_Repeated` represents the `repeated` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Repeated {
  _typename: String
  repeated: Validate_RepeatedRules
}

"""
`Validate_FieldRules_TypeOneof_Map` represents the `map` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Map {
  _typename: String
  map: Validate_MapRules
}

"""
`Validate_FieldRules_TypeOneof_Any` represents the `any` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Any {
  _typename: String
  """
  Well-Known Field Types
  """
  any: Validate_AnyRules
}

"""
`Validate_FieldRules_TypeOneof_Duration` represents the `duration` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Duration {
  _typename: String
  duration: Validate_DurationRules
}

"""
`Validate_FieldRules_TypeOneof_Timestamp` represents the `timestamp` oneof field in `validate.FieldRules`.
"""
type Validate_FieldRules_TypeOneof_Timestamp {
  _typename: String
  timestamp: Validate_TimestampRules
}

"""
FloatRules describes the constraints applied to `float` values
"""
type Validate_FloatRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
DoubleRules describes the constraints applied to `double` values
"""
type Validate_DoubleRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
Int32Rules describes the constraints applied to `int32` values
"""
type Validate_Int32Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
Int64Rules describes the constraints applied to `int64` values
"""
type Validate_Int64Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
UInt32Rules describes the constraints applied to `uint32` values
"""
type Validate_UInt32Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
UInt64Rules describes the constraints applied to `uint64` values
"""
type Validate_UInt64Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
SInt32Rules describes the constraints applied to `sint32` values
"""
type Validate_SInt32Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
SInt64Rules describes the constraints applied to `sint64` values
"""
type Validate_SInt64Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
Fixed32Rules describes the constraints applied to `fixed32` values
"""
type Validate_Fixed32Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
Fixed64Rules describes the constraints applied to `fixed64` values
"""
type Validate_Fixed64Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
SFixed32Rules describes the constraints applied to `sfixed32` values
"""
type Validate_SFixed32Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
SFixed64Rules describes the constraints applied to `sfixed64` values
"""
type Validate_SFixed64Rules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: Float
  """
  Lte specifies that this field must be less than or equal to the
  specified value, inclusive
  """
  lte: Float
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
  range is reversed.
  """
  gt: Float
  """
  Gte specifies that this field must be greater than or equal to the
  specified value, inclusive. If the value of Gte is larger than a
  specified Lt or Lte, the range is reversed.
  """
  gte: Float
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
BoolRules describes the constraints applied to `bool` values
"""
type Validate_BoolRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Boolean
}

"""
StringRules describe the constraints applied to `string` values
"""
type Validate_StringRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: String
  """
  Len specifies that this field must be the specified number of
  characters (Unicode code points). Note that the number of
  characters may differ from the number of bytes in the string.
  """
  len: Float
  """
  MinLen specifies that this field must be the specified number of
  characters (Unicode code points) at a minimum. Note that the number of
  characters may differ from the number of bytes in the string.
  """
  minLen: Float
  """
  MaxLen specifies that this field must be the specified number of
  characters (Unicode code points) at a maximum. Note that the number of
  characters may differ from the number of bytes in the string.
  """
  maxLen: Float
  """
  LenBytes specifies that this field must be the specified number of bytes
  """
  lenBytes: Float
  """
  MinBytes specifies that this field must be the specified number of bytes
  at a minimum
  """
  minBytes: Float
  """
  MaxBytes specifies that this field must be the specified number of bytes
  at a maximum
  """
  maxBytes: Float
  """
  Pattern specifes that this field must match against the specified
  regular expression (RE2 syntax). The included expression should elide
  any delimiters.
  """
  pattern: String
  """
  Prefix specifies that this field must have the specified substring at
  the beginning of the string.
  """
  prefix: String
  """
  Suffix specifies that this field must have the specified substring at
  the end of the string.
  """
  suffix: String
  """
  Contains specifies that this field must have the specified substring
  anywhere in the string.
  """
  contains: String
  """
  NotContains specifies that this field cannot have the specified substring
  anywhere in the string.
  """
  notContains: String
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [String!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [String!]!
  """
  WellKnown rules provide advanced constraints against common string
  patterns
  """
  wellKnown: Validate_StringRules_WellKnownOneof
  """
  This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
  strict header validation.
  By default, this is true, and HTTP header validations are RFC-compliant.
  Setting to false will enable a looser validations that only disallows
  \r\n\0 characters, which can be used to bypass header matching rules.
  """
  strict: Boolean
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
`Validate_StringRules_WellKnownOneof` represents the `well_known` oneof in `validate.StringRules`.
"""
union Validate_StringRules_WellKnownOneof = Validate_StringRules_WellKnownOneof_Email | Validate_StringRules_WellKnownOneof_Hostname | Validate_StringRules_WellKnownOneof_Ip | Validate_StringRules_WellKnownOneof_Ipv4 | Validate_StringRules_WellKnownOneof_Ipv6 | Validate_StringRules_WellKnownOneof_Uri | Validate_StringRules_WellKnownOneof_UriRef | Validate_StringRules_WellKnownOneof_Address | Validate_StringRules_WellKnownOneof_Uuid | Validate_StringRules_WellKnownOneof_WellKnownRegex

"""
`Validate_StringRules_WellKnownOneof_Email` represents the `email` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Email {
  _typename: String
  """
  Email specifies that the field must be a valid email address as
  defined by RFC 5322
  """
  email: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Hostname` represents the `hostname` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Hostname {
  _typename: String
  """
  Hostname specifies that the field must be a valid hostname as
  defined by RFC 1034. This constraint does not support
  internationalized domain names (IDNs).
  """
  hostname: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Ip` represents the `ip` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Ip {
  _typename: String
  """
  Ip specifies that the field must be a valid IP (v4 or v6) address.
  Valid IPv6 addresses should not include surrounding square brackets.
  """
  ip: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Ipv4` represents the `ipv4` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Ipv4 {
  _typename: String
  """
  Ipv4 specifies that the field must be a valid IPv4 address.
  """
  ipv4: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Ipv6` represents the `ipv6` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Ipv6 {
  _typename: String
  """
  Ipv6 specifies that the field must be a valid IPv6 address. Valid
  IPv6 addresses should not include surrounding square brackets.
  """
  ipv6: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Uri` represents the `uri` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Uri {
  _typename: String
  """
  Uri specifies that the field must be a valid, absolute URI as defined
  by RFC 3986
  """
  uri: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_UriRef` represents the `uri_ref` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_UriRef {
  _typename: String
  """
  UriRef specifies that the field must be a valid URI as defined by RFC
  3986 and may be relative or absolute.
  """
  uriRef: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Address` represents the `address` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Address {
  _typename: String
  """
  Address specifies that the field must be either a valid hostname as
  defined by RFC 1034 (which does not support internationalized domain
  names or IDNs), or it can be a valid IP (v4 or v6).
  """
  address: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_Uuid` represents the `uuid` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_Uuid {
  _typename: String
  """
  Uuid specifies that the field must be a valid UUID as defined by
  RFC 4122
  """
  uuid: Boolean
}

"""
`Validate_StringRules_WellKnownOneof_WellKnownRegex` represents the `well_known_regex` oneof field in `validate.StringRules`.
"""
type Validate_StringRules_WellKnownOneof_WellKnownRegex {
  _typename: String
  """
  WellKnownRegex specifies a common well known pattern defined as a regex.
  """
  wellKnownRegex: Validate_KnownRegex
}

"""
BytesRules describe the constraints applied to `bytes` values
"""
type Validate_BytesRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: String
  """
  Len specifies that this field must be the specified number of bytes
  """
  len: Float
  """
  MinLen specifies that this field must be the specified number of bytes
  at a minimum
  """
  minLen: Float
  """
  MaxLen specifies that this field must be the specified number of bytes
  at a maximum
  """
  maxLen: Float
  """
  Pattern specifes that this field must match against the specified
  regular expression (RE2 syntax). The included expression should elide
  any delimiters.
  """
  pattern: String
  """
  Prefix specifies that this field must have the specified bytes at the
  beginning of the string.
  """
  prefix: String
  """
  Suffix specifies that this field must have the specified bytes at the
  end of the string.
  """
  suffix: String
  """
  Contains specifies that this field must have the specified bytes
  anywhere in the string.
  """
  contains: String
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [String!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [String!]!
  """
  WellKnown rules provide advanced constraints against common byte
  patterns
  """
  wellKnown: Validate_BytesRules_WellKnownOneof
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
`Validate_BytesRules_WellKnownOneof` represents the `well_known` oneof in `validate.BytesRules`.
"""
union Validate_BytesRules_WellKnownOneof = Validate_BytesRules_WellKnownOneof_Ip | Validate_BytesRules_WellKnownOneof_Ipv4 | Validate_BytesRules_WellKnownOneof_Ipv6

"""
`Validate_BytesRules_WellKnownOneof_Ip` represents the `ip` oneof field in `validate.BytesRules`.
"""
type Validate_BytesRules_WellKnownOneof_Ip {
  _typename: String
  """
  Ip specifies that the field must be a valid IP (v4 or v6) address in
  byte format
  """
  ip: Boolean
}

"""
`Validate_BytesRules_WellKnownOneof_Ipv4` represents the `ipv4` oneof field in `validate.BytesRules`.
"""
type Validate_BytesRules_WellKnownOneof_Ipv4 {
  _typename: String
  """
  Ipv4 specifies that the field must be a valid IPv4 address in byte
  format
  """
  ipv4: Boolean
}

"""
`Validate_BytesRules_WellKnownOneof_Ipv6` represents the `ipv6` oneof field in `validate.BytesRules`.
"""
type Validate_BytesRules_WellKnownOneof_Ipv6 {
  _typename: String
  """
  Ipv6 specifies that the field must be a valid IPv6 address in byte
  format
  """
  ipv6: Boolean
}

"""
EnumRules describe the constraints applied to enum values
"""
type Validate_EnumRules {
  """
  Const specifies that this field must be exactly the specified value
  """
  const: Float
  """
  DefinedOnly specifies that this field must be only one of the defined
  values for this enum, failing on any undefined value.
  """
  definedOnly: Boolean
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [Float!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [Float!]!
}

"""
MessageRules describe the constraints applied to embedded message values.
For message-type fields, validation is performed recursively.
"""
type Validate_MessageRules {
  """
  Skip specifies that the validation rules of this field should not be
  evaluated
  """
  skip: Boolean
  """
  Required specifies that this field must be set
  """
  required: Boolean
}

"""
RepeatedRules describe the constraints applied to `repeated` values
"""
type Validate_RepeatedRules {
  """
  MinItems specifies that this field must have the specified number of
  items at a minimum
  """
  minItems: Float
  """
  MaxItems specifies that this field must have the specified number of
  items at a maximum
  """
  maxItems: Float
  """
  Unique specifies that all elements in this field must be unique. This
  contraint is only applicable to scalar and enum types (messages are not
  supported).
  """
  unique: Boolean
  """
  Items specifies the contraints to be applied to each item in the field.
  Repeated message fields will still execute validation against each item
  unless skip is specified here.
  """
  items: Validate_FieldRules
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
MapRules describe the constraints applied to `map` values
"""
type Validate_MapRules {
  """
  MinPairs specifies that this field must have the specified number of
  KVs at a minimum
  """
  minPairs: Float
  """
  MaxPairs specifies that this field must have the specified number of
  KVs at a maximum
  """
  maxPairs: Float
  """
  NoSparse specifies values in this field cannot be unset. This only
  applies to map's with message value types.
  """
  noSparse: Boolean
  """
  Keys specifies the constraints to be applied to each key in the field.
  """
  keys: Validate_FieldRules
  """
  Values specifies the constraints to be applied to the value of each key
  in the field. Message values will still have their validations evaluated
  unless skip is specified here.
  """
  values: Validate_FieldRules
  """
  IgnoreEmpty specifies that the validation rules of this field should be
  evaluated only if the field is not empty
  """
  ignoreEmpty: Boolean
}

"""
AnyRules describe constraints applied exclusively to the
`google.protobuf.Any` well-known type
"""
type Validate_AnyRules {
  """
  Required specifies that this field must be set
  """
  required: Boolean
  """
  In specifies that this field's `type_url` must be equal to one of the
  specified values.
  """
  in: [String!]!
  """
  NotIn specifies that this field's `type_url` must not be equal to any of
  the specified values.
  """
  notIn: [String!]!
}

"""
DurationRules describe the constraints applied exclusively to the
`google.protobuf.Duration` well-known type
"""
type Validate_DurationRules {
  """
  Required specifies that this field must be set
  """
  required: Boolean
  """
  Const specifies that this field must be exactly the specified value
  """
  const: GoogleProtobuf_Duration
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: GoogleProtobuf_Duration
  """
  Lt specifies that this field must be less than the specified value,
  inclusive
  """
  lte: GoogleProtobuf_Duration
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive
  """
  gt: GoogleProtobuf_Duration
  """
  Gte specifies that this field must be greater than the specified value,
  inclusive
  """
  gte: GoogleProtobuf_Duration
  """
  In specifies that this field must be equal to one of the specified
  values
  """
  in: [GoogleProtobuf_Duration!]!
  """
  NotIn specifies that this field cannot be equal to one of the specified
  values
  """
  notIn: [GoogleProtobuf_Duration!]!
}

"""
TimestampRules describe the constraints applied exclusively to the
`google.protobuf.Timestamp` well-known type
"""
type Validate_TimestampRules {
  """
  Required specifies that this field must be set
  """
  required: Boolean
  """
  Const specifies that this field must be exactly the specified value
  """
  const: GoogleProtobuf_Timestamp
  """
  Lt specifies that this field must be less than the specified value,
  exclusive
  """
  lt: GoogleProtobuf_Timestamp
  """
  Lte specifies that this field must be less than the specified value,
  inclusive
  """
  lte: GoogleProtobuf_Timestamp
  """
  Gt specifies that this field must be greater than the specified value,
  exclusive
  """
  gt: GoogleProtobuf_Timestamp
  """
  Gte specifies that this field must be greater than the specified value,
  inclusive
  """
  gte: GoogleProtobuf_Timestamp
  """
  LtNow specifies that this must be less than the current time. LtNow
  can only be used with the Within rule.
  """
  ltNow: Boolean
  """
  GtNow specifies that this must be greater than the current time. GtNow
  can only be used with the Within rule.
  """
  gtNow: Boolean
  """
  Within specifies that this field must be within this duration of the
  current time. This constraint can be used alone or with the LtNow and
  GtNow rules.
  """
  within: GoogleProtobuf_Duration
}

"""
WellKnownRegex contain some well-known patterns.
"""
enum Validate_KnownRegex {
  UNKNOWN
  """
  HTTP header name as defined by RFC 7230.
  """
  HTTP_HEADER_NAME
  """
  HTTP header value as defined by RFC 7230.
  """
  HTTP_HEADER_VALUE
}
