import * as Apollo from "@apollo/client";
import { gql } from "@apollo/client";

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
	[K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
	[SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
	[SubKey in K]: Maybe<T[SubKey]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: string;
	String: string;
	Boolean: boolean;
	Int: number;
	Float: number;
	_FieldSet: any;
};

export type Contact = {
	__typename?: "Contact";
	email: Scalars["String"];
	id: Scalars["ID"];
	message: Scalars["String"];
	name: Scalars["String"];
};

export type ContactCreateInput = {
	email: Scalars["String"];
	message: Scalars["String"];
	name: Scalars["String"];
};

export type ContactUpdateInput = {
	email?: InputMaybe<Scalars["String"]>;
	message?: InputMaybe<Scalars["String"]>;
	name?: InputMaybe<Scalars["String"]>;
};

export type Mutation = {
	__typename?: "Mutation";
	createContact?: Maybe<Contact>;
	deleteContact?: Maybe<Contact>;
	updateContact?: Maybe<Contact>;
};

export type MutationCreateContactArgs = {
	contact: ContactCreateInput;
};

export type MutationDeleteContactArgs = {
	id: Scalars["ID"];
};

export type MutationUpdateContactArgs = {
	contact: ContactUpdateInput;
};

/**
 * This file was generated by graphql-schema-generator which is
 * maintained by prisma-korea.
 *
 * Do not make changes to this file directly.
 * Read more about in https://github.com/prisma-korea/graphql-schema-generator.
 */
export type Query = {
	__typename?: "Query";
	contact?: Maybe<Contact>;
	contacts: Array<Contact>;
};

/**
 * This file was generated by graphql-schema-generator which is
 * maintained by prisma-korea.
 *
 * Do not make changes to this file directly.
 * Read more about in https://github.com/prisma-korea/graphql-schema-generator.
 */
export type QueryContactArgs = {
	id: Scalars["ID"];
};

export type CreateContactMutationVariables = Exact<{
	contact: ContactCreateInput;
}>;

export type CreateContactMutation = {
	__typename?: "Mutation";
	createContact?: {
		__typename?: "Contact";
		id: string;
		email: string;
		name: string;
		message: string;
	} | null;
};

export const CreateContactDocument = gql`
	mutation CreateContact($contact: ContactCreateInput!) {
		createContact(contact: $contact) {
			id
			email
			name
			message
		}
	}
`;
export type CreateContactMutationFn = Apollo.MutationFunction<
	CreateContactMutation,
	CreateContactMutationVariables
>;

/**
 * __useCreateContactMutation__
 *
 * To run a mutation, you first call `useCreateContactMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactMutation, { data, loading, error }] = useCreateContactMutation({
 *   variables: {
 *      contact: // value for 'contact'
 *   },
 * });
 */
export function useCreateContactMutation(
	baseOptions?: Apollo.MutationHookOptions<
		CreateContactMutation,
		CreateContactMutationVariables
	>,
) {
	const options = { ...defaultOptions, ...baseOptions };
	return Apollo.useMutation<
		CreateContactMutation,
		CreateContactMutationVariables
	>(CreateContactDocument, options);
}
export type CreateContactMutationHookResult = ReturnType<
	typeof useCreateContactMutation
>;
export type CreateContactMutationResult =
	Apollo.MutationResult<CreateContactMutation>;
export type CreateContactMutationOptions = Apollo.BaseMutationOptions<
	CreateContactMutation,
	CreateContactMutationVariables
>;
