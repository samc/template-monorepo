#!/bin/sh

# Files to watch. If these files change, `direnv`
# will trigger a `direnv reload`.k9s

watch_file package.json
watch_file pyproject.toml
watch_file tools.go

watch_file .linters/.cspell.json
watch_file .linters/.jscpd.json
watch_file .linters/.prettierignore
watch_file .linters/.prettierrc.yaml
watch_file .linters/.secretlintignore
watch_file .linters/.secretlintrc.json
watch_file .linters/.yamllint.yaml

watch_file .settings/_.json
watch_file .settings/development.json
watch_file .settings/staging.json
watch_file .settings/production.json

# Loads a `.env` file into the current environment.
dotenv_if_exists .env

# Launch `lorri` if present. If not, default to
# direnv's `use nix`.
if has lorri; then
  eval "$(lorri direnv)"
else
  use nix
fi

# Use direnv's `go` layout.
#
# Read more:
# https://direnv.net/man/direnv-stdlib.1.html#codelayout-gocode
layout go

# Use direnv's `python` layout.
#
# Read more:
# https://direnv.net/man/direnv-stdlib.1.html#codelayout-python-ltpythonexegtcode
layout python

# Use direnv's `node` layout.
#
# Read more:
# https://direnv.net/man/direnv-stdlib.1.html#codelayout-nodecode
layout node

# Add `.tools` to the PATH environment variable.
PATH_add .tools

# Bootstrap the project development environment.
# This will initialize or refresh project
# configuration files, dependencies, and environment
# variables, respectively.
if [ "${INIT}" != "True" ]; then
  poetry install --quiet
  invoke init
else
  invoke refresh
fi
